#pragma once

//Init cheat code
#define IO_INIT_CHEAT_DATA				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3000, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_UPDATE_CHEAT_DATA			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3001, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_DRIVER_ALIVE     			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3002, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

//Cheat Memory access
#define IO_READ_PROCESS_MEMORY			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3003, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_WRITE_PROCESS_MEMORY			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3004, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_READ_PROCESS_MEMORY_32		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3005, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_WRITE_PROCESS_MEMORY_32		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3006, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

//Injection Functions (for internal cheats)
#define IO_INJECT_DLL					CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3007, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

//CS GO ONLY Methods
#define IO_GET_CLIENT_DLL				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3008, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_GET_SERVER_DLL				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x3009, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_GET_ENGINE_DLL				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x300A, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IO_GET_ALL_MODULES				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x300B, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)


typedef struct _KERNEL_INIT_DATA_REQUEST
{
	DWORD64 CsgoId;
	DWORD64 CheatId;
	NTSTATUS Result;
} KERNEL_INIT_DATA_REQUEST, * PKERNEL_INIT_DATA_REQUEST;

typedef struct _KERNEL_READ_REQUEST
{
	DWORD64 Address;
	DWORD64 Response;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_READ_REQUEST, * PKERNEL_READ_REQUEST;

typedef struct _KERNEL_WRITE_REQUEST
{
	DWORD64 Address;
	DWORD64 Value;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_WRITE_REQUEST, * PKERNEL_WRITE_REQUEST;

typedef struct _KERNEL_READ_REQUEST32
{
	DWORD32 Address;
	DWORD64 Response;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_READ_REQUEST32, * PKERNEL_READ_REQUEST32;

typedef struct _KERNEL_WRITE_REQUEST32
{
	DWORD32 Address;
	DWORD64 Value;
	SIZE_T Size;
	NTSTATUS Result;
} KERNEL_WRITE_REQUEST32, * PKERNEL_WRITE_REQUEST32;


typedef struct _KERNEL_GET_MODULE
{
	DWORD64 ImageBase;
	SIZE_T ImageSize;
} KERNEL_GET_MODULE, * PKERNEL_GET_MODULE;

typedef struct _KERNEL_GET_MODULE32
{
	DWORD32 ImageBase;
	SIZE_T ImageSize;
} KERNEL_GET_MODULE32, * PKERNEL_GET_MODULE32;


typedef struct _KERNEL_GET_CSGO_MODULES
{
	DWORD32 bClient;
	DWORD32 bEngine;
	DWORD32 bServer;
	NTSTATUS result;
} KERNEL_GET_CSGO_MODULES, * PKERNEL_GET_CSGO_MODULES;

/// <summary>
/// Input for IO_DRIVER_ALIVE
/// </summary>
typedef struct _DRIVER_ALIVE_REQUEST
{
	NTSTATUS status; //Return 0 if driver is active
} DRIVER_ALIVE_REQUEST, * PDRIVER_ALIVE_REQUEST;
